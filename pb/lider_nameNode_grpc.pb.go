// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LiderNameNodeServiceClient is the client API for LiderNameNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiderNameNodeServiceClient interface {
	GuardarJugada(ctx context.Context, in *Jugada, opts ...grpc.CallOption) (*Response, error)
	ResultadoJugadasStageOne(ctx context.Context, in *Jugada, opts ...grpc.CallOption) (*Response, error)
}

type liderNameNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLiderNameNodeServiceClient(cc grpc.ClientConnInterface) LiderNameNodeServiceClient {
	return &liderNameNodeServiceClient{cc}
}

func (c *liderNameNodeServiceClient) GuardarJugada(ctx context.Context, in *Jugada, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/LiderNameNodeService/GuardarJugada", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liderNameNodeServiceClient) ResultadoJugadasStageOne(ctx context.Context, in *Jugada, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/LiderNameNodeService/ResultadoJugadasStageOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiderNameNodeServiceServer is the server API for LiderNameNodeService service.
// All implementations must embed UnimplementedLiderNameNodeServiceServer
// for forward compatibility
type LiderNameNodeServiceServer interface {
	GuardarJugada(context.Context, *Jugada) (*Response, error)
	ResultadoJugadasStageOne(context.Context, *Jugada) (*Response, error)
	mustEmbedUnimplementedLiderNameNodeServiceServer()
}

// UnimplementedLiderNameNodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLiderNameNodeServiceServer struct {
}

func (UnimplementedLiderNameNodeServiceServer) GuardarJugada(context.Context, *Jugada) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuardarJugada not implemented")
}
func (UnimplementedLiderNameNodeServiceServer) ResultadoJugadasStageOne(context.Context, *Jugada) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResultadoJugadasStageOne not implemented")
}
func (UnimplementedLiderNameNodeServiceServer) mustEmbedUnimplementedLiderNameNodeServiceServer() {}

// UnsafeLiderNameNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiderNameNodeServiceServer will
// result in compilation errors.
type UnsafeLiderNameNodeServiceServer interface {
	mustEmbedUnimplementedLiderNameNodeServiceServer()
}

func RegisterLiderNameNodeServiceServer(s grpc.ServiceRegistrar, srv LiderNameNodeServiceServer) {
	s.RegisterService(&LiderNameNodeService_ServiceDesc, srv)
}

func _LiderNameNodeService_GuardarJugada_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Jugada)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiderNameNodeServiceServer).GuardarJugada(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LiderNameNodeService/GuardarJugada",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiderNameNodeServiceServer).GuardarJugada(ctx, req.(*Jugada))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiderNameNodeService_ResultadoJugadasStageOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Jugada)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiderNameNodeServiceServer).ResultadoJugadasStageOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LiderNameNodeService/ResultadoJugadasStageOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiderNameNodeServiceServer).ResultadoJugadasStageOne(ctx, req.(*Jugada))
	}
	return interceptor(ctx, in, info, handler)
}

// LiderNameNodeService_ServiceDesc is the grpc.ServiceDesc for LiderNameNodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiderNameNodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LiderNameNodeService",
	HandlerType: (*LiderNameNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GuardarJugada",
			Handler:    _LiderNameNodeService_GuardarJugada_Handler,
		},
		{
			MethodName: "ResultadoJugadasStageOne",
			Handler:    _LiderNameNodeService_ResultadoJugadasStageOne_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/lider_nameNode.proto",
}
