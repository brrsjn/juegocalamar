// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JugadorLiderServiceClient is the client API for JugadorLiderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JugadorLiderServiceClient interface {
	SolicitarUnirce(ctx context.Context, in *InscripcionJugador, opts ...grpc.CallOption) (*Jugador, error)
	IniciarEtapa(ctx context.Context, in *SolicitarInicioJuego, opts ...grpc.CallOption) (JugadorLiderService_IniciarEtapaClient, error)
	LuzRojaLuzVerde(ctx context.Context, in *JugadaCliente, opts ...grpc.CallOption) (JugadorLiderService_LuzRojaLuzVerdeClient, error)
}

type jugadorLiderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJugadorLiderServiceClient(cc grpc.ClientConnInterface) JugadorLiderServiceClient {
	return &jugadorLiderServiceClient{cc}
}

func (c *jugadorLiderServiceClient) SolicitarUnirce(ctx context.Context, in *InscripcionJugador, opts ...grpc.CallOption) (*Jugador, error) {
	out := new(Jugador)
	err := c.cc.Invoke(ctx, "/JugadorLiderService/SolicitarUnirce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jugadorLiderServiceClient) IniciarEtapa(ctx context.Context, in *SolicitarInicioJuego, opts ...grpc.CallOption) (JugadorLiderService_IniciarEtapaClient, error) {
	stream, err := c.cc.NewStream(ctx, &JugadorLiderService_ServiceDesc.Streams[0], "/JugadorLiderService/IniciarEtapa", opts...)
	if err != nil {
		return nil, err
	}
	x := &jugadorLiderServiceIniciarEtapaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JugadorLiderService_IniciarEtapaClient interface {
	Recv() (*EsperandoJugadores, error)
	grpc.ClientStream
}

type jugadorLiderServiceIniciarEtapaClient struct {
	grpc.ClientStream
}

func (x *jugadorLiderServiceIniciarEtapaClient) Recv() (*EsperandoJugadores, error) {
	m := new(EsperandoJugadores)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jugadorLiderServiceClient) LuzRojaLuzVerde(ctx context.Context, in *JugadaCliente, opts ...grpc.CallOption) (JugadorLiderService_LuzRojaLuzVerdeClient, error) {
	stream, err := c.cc.NewStream(ctx, &JugadorLiderService_ServiceDesc.Streams[1], "/JugadorLiderService/LuzRojaLuzVerde", opts...)
	if err != nil {
		return nil, err
	}
	x := &jugadorLiderServiceLuzRojaLuzVerdeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JugadorLiderService_LuzRojaLuzVerdeClient interface {
	Recv() (*JugadaLider, error)
	grpc.ClientStream
}

type jugadorLiderServiceLuzRojaLuzVerdeClient struct {
	grpc.ClientStream
}

func (x *jugadorLiderServiceLuzRojaLuzVerdeClient) Recv() (*JugadaLider, error) {
	m := new(JugadaLider)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JugadorLiderServiceServer is the server API for JugadorLiderService service.
// All implementations must embed UnimplementedJugadorLiderServiceServer
// for forward compatibility
type JugadorLiderServiceServer interface {
	SolicitarUnirce(context.Context, *InscripcionJugador) (*Jugador, error)
	IniciarEtapa(*SolicitarInicioJuego, JugadorLiderService_IniciarEtapaServer) error
	LuzRojaLuzVerde(*JugadaCliente, JugadorLiderService_LuzRojaLuzVerdeServer) error
	mustEmbedUnimplementedJugadorLiderServiceServer()
}

// UnimplementedJugadorLiderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJugadorLiderServiceServer struct {
}

func (UnimplementedJugadorLiderServiceServer) SolicitarUnirce(context.Context, *InscripcionJugador) (*Jugador, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolicitarUnirce not implemented")
}
func (UnimplementedJugadorLiderServiceServer) IniciarEtapa(*SolicitarInicioJuego, JugadorLiderService_IniciarEtapaServer) error {
	return status.Errorf(codes.Unimplemented, "method IniciarEtapa not implemented")
}
func (UnimplementedJugadorLiderServiceServer) LuzRojaLuzVerde(*JugadaCliente, JugadorLiderService_LuzRojaLuzVerdeServer) error {
	return status.Errorf(codes.Unimplemented, "method LuzRojaLuzVerde not implemented")
}
func (UnimplementedJugadorLiderServiceServer) mustEmbedUnimplementedJugadorLiderServiceServer() {}

// UnsafeJugadorLiderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JugadorLiderServiceServer will
// result in compilation errors.
type UnsafeJugadorLiderServiceServer interface {
	mustEmbedUnimplementedJugadorLiderServiceServer()
}

func RegisterJugadorLiderServiceServer(s grpc.ServiceRegistrar, srv JugadorLiderServiceServer) {
	s.RegisterService(&JugadorLiderService_ServiceDesc, srv)
}

func _JugadorLiderService_SolicitarUnirce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InscripcionJugador)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JugadorLiderServiceServer).SolicitarUnirce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JugadorLiderService/SolicitarUnirce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JugadorLiderServiceServer).SolicitarUnirce(ctx, req.(*InscripcionJugador))
	}
	return interceptor(ctx, in, info, handler)
}

func _JugadorLiderService_IniciarEtapa_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SolicitarInicioJuego)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JugadorLiderServiceServer).IniciarEtapa(m, &jugadorLiderServiceIniciarEtapaServer{stream})
}

type JugadorLiderService_IniciarEtapaServer interface {
	Send(*EsperandoJugadores) error
	grpc.ServerStream
}

type jugadorLiderServiceIniciarEtapaServer struct {
	grpc.ServerStream
}

func (x *jugadorLiderServiceIniciarEtapaServer) Send(m *EsperandoJugadores) error {
	return x.ServerStream.SendMsg(m)
}

func _JugadorLiderService_LuzRojaLuzVerde_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JugadaCliente)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JugadorLiderServiceServer).LuzRojaLuzVerde(m, &jugadorLiderServiceLuzRojaLuzVerdeServer{stream})
}

type JugadorLiderService_LuzRojaLuzVerdeServer interface {
	Send(*JugadaLider) error
	grpc.ServerStream
}

type jugadorLiderServiceLuzRojaLuzVerdeServer struct {
	grpc.ServerStream
}

func (x *jugadorLiderServiceLuzRojaLuzVerdeServer) Send(m *JugadaLider) error {
	return x.ServerStream.SendMsg(m)
}

// JugadorLiderService_ServiceDesc is the grpc.ServiceDesc for JugadorLiderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JugadorLiderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "JugadorLiderService",
	HandlerType: (*JugadorLiderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SolicitarUnirce",
			Handler:    _JugadorLiderService_SolicitarUnirce_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "IniciarEtapa",
			Handler:       _JugadorLiderService_IniciarEtapa_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LuzRojaLuzVerde",
			Handler:       _JugadorLiderService_LuzRojaLuzVerde_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pb/jugador_lider.proto",
}
